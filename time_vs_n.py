# -*- coding: utf-8 -*-
"""Time Vs n.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1185oPFNvO-ryZHM6hswAHr5DNJhpi188
"""

import time
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Function to measure execution time
def f(n):
    x = 1
    start_time = time.time()
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            x = x + 1
    end_time = time.time()
    return end_time - start_time

# Testing for various values of n
n_values = np.arange(1, 101) # Let's go from 1 to 100 for a broad range
time_values = np.array([f(n) for n in n_values])

# Curve fitting (assuming a polynomial time complexity)
def poly_model(x, a, b, c):
    return a * x**2 + b * x + c

params, _ = curve_fit(poly_model, n_values, time_values)

# Plotting time vs. n
plt.figure(figsize=(10, 6))
plt.scatter(n_values, time_values, color='blue', label='Actual Time')
plt.plot(n_values, poly_model(n_values, *params), color='red', label='Fitted Curve')
plt.xlabel('n')
plt.ylabel('Time (seconds)')
plt.title('Time vs. n')
plt.legend()
plt.grid(True)
plt.show(), params